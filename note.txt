1) use npm init
2) nmm i express
3) nella cartella scr metti i sorgenti
4) cartella public per file html
5) aggiunto handlebars per creare pagine dinamiche che utilizzano lo stesso HTML code (Template engine) handlebars su npm è il più usato a basso livello, hbs più semplice e lo inserito
6) creata cartella view per i template dinamici
7) Aggiunta cartella view per i template dinamici e index.hbs8) index.html sarebbe da eleiminare ma lo tengo
8) I partials puoi usarli per rendere una cosa sola su tutte le altre pagine senza scriverle in ognuna tutte le volte
9) RICORDATI la funzione RENDER e non send per hbs file
10) Ricordati che in una funzione .get non puoi rispondere più di una volta!!! devi mandare una risposta sola (send()) --> errore in console: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
11) Cerca di non usare i moduli globali ma locali in modo che altri se vogliono eseguire localemente non hanno problemi con le dependency

CSS:
1) per color puoi definire anche l'hex code del colore ( es. #333333 è grey)
2) Centrare il body:
    - margin: 0 auto --> 0 non vai ad aggiungere spazio dai margini top e bottom come offset mentre auto distribuisce lo spazio per i margini sinistra e destra
    - padding: 0 16px --> 0 sotto e sopra e 16px se riduci la finestra dal margine sinistro terrà 16px staccato
3) padding aggiunge spazio dentro il box
4) margin aggiunge spazio fuori il box
5) header a {/*regole di style*/} --> per ogni tag a dentro header
6) .portrait {} applica alla classe portrait
7) mettere il footer piantato in fondo:
    - usi le flex box
8) <link rel="icon" href="/img/weather icon.png"> <!-- icona del sito web nei tab del browser--> nel head di ogni pagina
9) in input tag la proprietà placeholder è quello che si scrive nel form di input come "descrizione"

Javascript LATO CLIENT:
1) l'oggetto document è l'oggetto che si riferisce alla pagina HTML
2) HTML lo <script> va messo in fondo se non deve eseguirlo subito all'inizio della pagina perchè così la pagina lo legge per ultimo se no sopra nel tag meta creava errori in console su Chrome
    cioè sotto l'oggetto a cui lo script fa riferimento

COMANDI UTILI:
1) nodemon app.js -e js,hbs dici a nodemon di rilanciare il server al cambiamento dei file js e hbs

DEPLOY HEROKU:
1) Modificato il campo script su package-json inserendo il comando e quale file far eseguire ad HEROKU
2) Modificata porta di ascolto da 3000 (serve solo localmente) con porta fornita da HEROKU
//Porta di ascolto di Heroku oppure 3000 se eseguita localmente tramite operatore OR
const port = process.env.PORT || 3000
dice: se esiste quella variabile se no metti 3000
3) !!!!!!!!!!!!!!!!!!!!!NB!!!!!!!!!!!!!!!!!!!!
CREA CHIAVE SSH e condividila con Heroku e GitHub
4) //cambiato da 'http://localhost:3000/weather?address=' in sotto, per eseguire su Heroku
    fetch('/weather?address='+search.value).then((response)